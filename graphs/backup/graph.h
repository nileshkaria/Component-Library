#ifndef __GRAPH_H__
#define __GRAPH_H__

#include <igraph.h>

#include <vector>

namespace Graph
{
  //============================================================================
  class Graph : public virtual IGraph
  {
  private:
    //--------------------------------------------------------------------------
    int                             _vertices;
    int                             _edges;

    std::vector<std::set<int> *>    _adjList;

    //--------------------------------------------------------------------------
    Graph(const Graph &);
    Graph & operator=(const Graph &);

  public:
    //--------------------------------------------------------------------------
    Graph(int v = 0);

    //--------------------------------------------------------------------------
    virtual ~Graph();

    //--------------------------------------------------------------------------
    virtual void addEdge(int v, int w);

    //--------------------------------------------------------------------------
    virtual const container_t & adjacent(int v) const;

    //--------------------------------------------------------------------------
    virtual int vertices() const;

    //--------------------------------------------------------------------------
    virtual int edges() const;

    //--------------------------------------------------------------------------
    virtual const IGraph & reverse() const;

    //--------------------------------------------------------------------------
    virtual std::string toString();
  };

}

#endif
