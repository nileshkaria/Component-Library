#include <edge.h>

using namespace std;

namespace Graph
{
    //==========================================================================
    //--------------------------------------------------------------------------
    Edge::Edge(int v, int w, double weight) :
        _v      (v),
        _w      (w),
        _weight (weight)
    {}

    //--------------------------------------------------------------------------
    Edge::~Edge()
    {}

    //--------------------------------------------------------------------------
    void Edge::addEdge(int v, int w)
    { 
        _adjList[v]->insert(w);

        ++_edges;
        
        if(_pReverseGraph)
        {
            delete _pReverseGraph;
            _pReverseGraph = 0;
        }
    }

    //--------------------------------------------------------------------------
    const IGraph::container_t & Edge::adjacent(int v) const
    { 
        return *_adjList[v];
    }

    //--------------------------------------------------------------------------
    int Edge::vertices() const
    { 
        return _vertices;        
    }

    //--------------------------------------------------------------------------
    int Edge::edges() const
    { 
        return _edges;
    }

    //--------------------------------------------------------------------------
    const IGraph & Edge::reverse() const
    { 
        if(!_pReverseGraph)
        {
            IGraph *pTemp = _pReverseGraph;
            
            pTemp = new Edge(_vertices);
            
            for(size_t v = 0; v < _vertices; ++v)
            {
                for(set<int>::iterator it = _adjList[v]->begin(); it != _adjList[v]->end(); ++it)
                    pTemp->addEdge(*it, v);
            }
        }
        
        return *_pReverseGraph;
    }

    //--------------------------------------------------------------------------
    std::string Edge::toString()
    { 
    }

}
